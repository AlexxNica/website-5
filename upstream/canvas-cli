#!/usr/bin/python
#
# Copyright (C) 2013    Ian Firns   <firnsy@kororaproject.org>
#                       Chris Smart <csmart@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import getpass
import json
import optparse
import os
import signal
import sys
import yum


from Canvas import CanvasService
from Canvas import Package
from Canvas import PackageList
from Canvas import Repository
from Canvas import RepositoryList
from Canvas import Template

class CanvasFormatter(argparse.HelpFormatter):
  def _format_action_invocation(self, action):
    if not action.option_strings:
      default = self._get_default_metavar_for_positional(action)
      metavar, = self._metavar_formatter(action, default)(1)
      return metavar

    parts = []

    # if the Optional doesn't take a value, format is:
    #    -s, --long
    if action.nargs == 0:
      parts.extend(action.option_strings)

    # if the Optional takes a value, format is:
    #    -s ARGS, --long ARGS
    else:
      default = self._get_default_metavar_for_optional(action)
      args_string = self._format_args(action, default)

      for option_string in action.option_strings:
        parts.append(option_string)

      return '%s %s' % (', '.join(parts), args_string)

    return ', ' . join(parts)

  def _get_default_metavar_for_optional(self, action):
    return action.dest.upper()

  def _get_default_metavar_for_positional(self, action):
    return action.dest.upper()


def main():
  def signal_handler(signal, frame):
    print
    sys.exit(0)

  # trap ctrl+c, it's polish
  signal.signal(signal.SIGINT, signal_handler)

  parser = argparse.ArgumentParser(prog='canvas-cli', formatter_class=CanvasFormatter)
  subparsers = parser.add_subparsers(dest='command', title='Commands')

  #
  # general arguments
  parser.add_argument('-u', '--user', type=str, dest='username')
  parser.add_argument('-p', '--pass', action='store_true', dest='password')
  parser.add_argument('--host', type=str, dest='host')
  parser.add_argument('-v', '--verbose', action="store_true", dest='verbose')
  parser.add_argument('-V', '--version', action='version', version='1.0')

  #
  # account general arguments
  parser_account = subparsers.add_parser('account')
  subparsers_account = parser_account.add_subparsers(dest='account_command', title='Account Commands')

  #
  # template general arguments
  parser_template = subparsers.add_parser('template', formatter_class=CanvasFormatter)
  subparsers_template = parser_template.add_subparsers(dest='template_command', title='Template Commands')

  parser_template.add_argument('-n', '--dry-run', action="store_true", dest='dryrun')

  # template create arguments
  parser_template_create = subparsers_template.add_parser('create', formatter_class=CanvasFormatter)

  parser_template_create.add_argument('-i', '--inherit', type=str, dest='inherit')
  parser_template_create.add_argument('template', type=str, help='name of template to be created (eg. user:test)')

  # template list arguments
  parser_template_list = subparsers_template.add_parser('list', formatter_class=CanvasFormatter)

  # template add arguments
  parser_template_add = subparsers_template.add_parser('add', formatter_class=CanvasFormatter)
  parser_template_add.add_argument('--create', action='store_true', dest='create')
  parser_template_add.add_argument('-t', '--template', type=str, dest='template', help='Template to add packages to')
  ptag = parser_template_add.add_mutually_exclusive_group(required=True)
  ptag.add_argument('-s', '--system', action='store_true', dest='system')
  ptag.add_argument('-p', '--packages', dest='packages', nargs='+')

  # template pin arguments
  parser_template_pin = subparsers_template.add_parser('pin', formatter_class=CanvasFormatter)
  parser_template_pin.add_argument('-t', '--template', type=str, dest='template')

  # template unpin arguments
  parser_template_unpin = subparsers_template.add_parser('unpin', formatter_class=CanvasFormatter)
  parser_template_unpin.add_argument('-t', '--template', type=str, dest='template')

  # template remove arguments
  parser_template_remove = subparsers_template.add_parser('remove', formatter_class=CanvasFormatter)
  parser_template_remove.add_argument('-t', '--template', type=str, dest='template')

  # template apply arguments
  parser_template_apply = subparsers_template.add_parser('apply', formatter_class=CanvasFormatter)
  parser_template_apply.add_argument('--clean', action='store_true', dest='merge_clean')
  parser_template_apply.add_argument('-t', '--template', type=str, dest='template')

  # template delete arguments
  parser_template_delete = subparsers_template.add_parser('delete', formatter_class=CanvasFormatter)
  parser_template_delete.add_argument('-t', '--template', type=str, dest='template')

  #
  # package general arguments
  parser_package = subparsers.add_parser('package', formatter_class=CanvasFormatter)
  subparsers_package = parser_package.add_subparsers(dest='package_command', title='Package Commands')

  #
  # machine general arguments
  parser_machine = subparsers.add_parser('machine', formatter_class=CanvasFormatter)
  subparsers_machine = parser_machine.add_subparsers(dest='machine_command', title='Machine Commands')

  # machine create arguments
  parser_machine_create = subparsers_machine.add_parser('create', formatter_class=CanvasFormatter)

  # machine push arguments
  parser_machine_push = subparsers_machine.add_parser('push', formatter_class=CanvasFormatter)

  # machine add arguments
  parser_machine_pull = subparsers_machine.add_parser('pull', formatter_class=CanvasFormatter)

  # machine sync arguments
  parser_machine_sync = subparsers_machine.add_parser('sync', formatter_class=CanvasFormatter)

  args = parser.parse_args()



  # prompt for password if requested
  password = ''
  if args.password:
    password = getpass.getpass()

  if args.host:
    cs = CanvasService(host=args.host)
  else:
    cs = CanvasService()


  if args.command == 'template':
    # no template created for list
    if args.template_command != 'list':
      t = Template( args.template )

    if args.template_command == 'create':
      if args.inherit:
        i = Template( args.inherit )
        print('Inheriting from: %s' % ( str(i) ))

      if args.dryrun:
        print('The following template would be created:')
        print('  - %s' % ( str(t) ) )

      # perform the real action
      else:
        if not cs.authenticate(args.username, password):
          print('Unable to authenticate with canvas service.')
          sys.exit(1)

        cs.template_create( t )


    if args.template_command == 'delete':
      print('The following template will be deleted:')
      print('  - %s' % ( str(t) ))

      if args.dryrun:
        print('No action peformed during this dry-run.')

      # perform the real action
      else:
        if not cs.authenticate(args.username, password):
          print('Unable to authenticate with canvas service.')
          sys.exit(1)

        t_delete = cs.template_get( t )

        if t_delete is not None:
          cs.template_delete( t_delete.id )
          print('Template deleted.')

        else:
          print('Template not found.')


    elif args.template_command == 'list':
        if not cs.authenticate(args.username, password):
          print('Unable to authenticate with canvas service.')
          sys.exit(1)

        tl = cs.template_list()

        if len( tl ):
          print('Templates:')

          for t in tl:
            print('  - %s (%s)' % ( t['name'], t['owner'] ))

          print
          print('%d template(s) found.' % ( len(tl) ))

        else:
          print('0 templates found. \'Tis the dawn of time.')


    elif args.template_command == 'add':
      pl = PackageList( args.packages )

      if args.system:
        print('Adding current system packages to template ...')

        yb = yum.YumBase()

        pkgs = yb.rpmdb.returnPackages()

        for p in pkgs:
          _yd = p.yumdb_info
          if _yd.get('reason') == 'user':
            pl.add( Package( name=p.name, epoch=p.epoch, version=p.version, release=p.release, arch=p.arch, action=1) )


        rl = RepositoryList( yb.repos.listEnabled() )

        t.setPackageList( pl )
        t.setRepositoryList( rl )

      if args.dryrun:
        print('The following would be added to the template %s:' % ( str(t) ))

        packages = t.getPackageList().packages()
        packages.sort( key=lambda x: x.name )

        for p in packages:
          print('  - ' + str(p))

        repos = t.getRepositoryList().repos()
        repos.sort( key=lambda x: x.name )
        for r in repos:
          print('  - ' + str(r))

        print
        print('Summary:')
        print('  - Package(s): %d' % ( len(packages) ))
        print('  - Repo(s): %d' % ( len(repos) ))
        print
        print('No action peformed during this dry-run.')

      # perform the real action
      else:

        if not cs.authenticate(args.username, password):
          print('Unable to authenticate with canvas service.')
          sys.exit(1)

        t_add = cs.template_get( t )

        if t_add is not None:
          t_add.merge( template=t )
          cs.template_add( t_add )

        elif args.create:
          cs.template_create( t )

        else:
          print('Template does not exist.')
          sys.exit(1)


    elif args.template_command == 'remove':
      print('The following packages will be removed from template:')

      l = PackageList( args.packages )
      print(l)

      for p in l.packages():
        print('  - %s ' % ( str(p) ))

    elif args.template_command == 'apply':
      if not cs.authenticate(args.username, password):
        print('Unable to authenticate with canvas service.')
        sys.exit(1)

      t_apply = cs.template_get( t )

      # check the template exists
      if t_apply is None:
        print('Template does not exist.')

      else:
        # calculate existing system specs
        t_system = Template()

        yb = yum.YumBase()
        yb.conf.cache = os.geteuid() != 0

        pkgs = yb.rpmdb.returnPackages()
        pl = PackageList()

        count_package_installs = 0
        count_package_removals = 0;

        print('The following actions will be applied to this system:')

        # loop through packages on system and compare to template
        for p in pkgs:
          _yd = p.yumdb_info
          if _yd.get('reason') == 'user':
            # action set to 1 indicating to be installed
            _p = Package( name=p.name, epoch=p.epoch, version=p.version, release=p.release, arch=p.arch)

            found = False

            # look for packages in template to apply and on the system
            for tp in t_apply.getPackageList().packages():
              if p.name != tp.name:
                continue

              found = True

              # template indicates explicit removal
              if tp.actionUninstall():
                print('  - Remove ' + str(tp))
                yb.remove( name=tp.name )
                count_package_removals +=1

            # package on system, installed by user, was not found in template
            if not found and args.merge_clean:
              print('  - Remove ' + str(_p))
              yb.remove( name=p.name )
              count_package_removals += 1

        # loop through packages in template that are not in the system
        for tp in t_apply.getPackageList().packages():
          found = False

          for p in pkgs:
            if tp.name != p.name:
              continue

            found = True

          # package not on system and in template requested install
          if not found and tp.actionInstall():
            print('  - Install ' + str(tp))
            yb.install( name=tp.name )
            count_package_installs += 1

#        rl = RepositoryList( yb.repos.listEnabled() )

        print
        print('Summary:')
        if count_package_installs:
          print('  - Package(s) installed: %d' % ( count_package_installs ))
        if count_package_removals:
          print('  - Package(s) removed:   %d' % ( count_package_removals ))
#        print '  - Repo(s) added:        %d' % ( len(repos) )
        print

        # show actions on
        if args.dryrun:
          print('No action peformed during this dry-run.')

        # perform the real action
        else:
          # TODO: yum magic here
          yb.repos.setProgressBar( TextMeter(fo=sys.stdout) )

          yb.repos.doSetup()
          yb.buildTransaction()
          yb.processTransaction()

  elif args.command == 'machine':
    print('Machine')

  if not args.dryrun:
    cs.deauthenticate()

if __name__ == '__main__':
  main()
